{
  "name": "onoff",
  "version": "0.1.3",
  "description": "GPIO based I/O and interrupt detection on the BeagleBone or Raspberry Pi",
  "main": "onoff.js",
  "directories": {
    "example": "examples",
    "test": "test"
  },
  "scripts": {
    "test": "echo \"Tests can only be run manually from the command line. They access hardware GPIOs.\" && exit 1",
    "install": "node-gyp rebuild"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/fivdi/onoff.git"
  },
  "engines": {
    "node": ">=0.8.0"
  },
  "os": [
    "linux"
  ],
  "keywords": [
    "gpio",
    "embedded",
    "interrupt",
    "interrupts",
    "beaglebone",
    "beagle",
    "bone",
    "raspberry",
    "raspi",
    "rpi",
    "pi",
    "linux"
  ],
  "author": {
    "name": "fivdi"
  },
  "license": "MIT",
  "gypfile": true,
  "readme": "## onoff\n\nGPIO based I/O and interrupt detection with Node.js on Linux boards such as the\nBeagleBone or Raspberry Pi.\n\nonoff provides a constructor function called Gpio which can be used to make\nGpio objects corresponding to Linux GPIOs. Examples of its usage can be seen in\nthe code below. The Gpio methods available are as follows:\n\n  * read(callback) - Read GPIO value asynchronously\n  * readSync() - Read GPIO value synchronously\n  * write(value, callback) - Write GPIO value asynchronously\n  * writeSync(value) - Write GPIO value synchronously\n  * watch(callback) - Watch and wait for GPIO to interrupt\n  * direction() - Read GPIO direction\n  * edge() - Read GPIO interrupt generating edge\n  * options() - Get GPIO options\n  * unexport() - Reverse the effect of exporting the GPIO to userspace\n\nGPIOs on Linux are identified by unsigned integers. These are the numbers that\nshould be passed to the onoff Gpio constructor function when exporting GPIOs\nto userspace. For example, pin P1_11 on the Raspberry Pi P1 expansion header\ncorresponds to GPIO #17 in Raspbian Linux. 17 is therefore the number to pass\nto the onoff Gpio constructor when using pin P1_11 on the P1 expansion header.\n\nonoff requires Node.js v0.8.0 or higher.\n\n## Installation\n\n    $ npm install onoff\n\n## Synchronous API - Blink the LED on GPIO #17 for 5 seconds\n\nThe examples here can be run by the superuser or by non-superusers when the\ntechnique described in section \"How to handle superuser issues\" is used.\n\n```js\nvar Gpio = require('onoff').Gpio, // Constructor function for Gpio objects.\n    led = new Gpio(17, 'out'),    // Export GPIO #17 as an output.\n    iv;\n\n// Toggle the state of the LED on GPIO #17 every 200ms.\n// Here synchronous methods are used. Asynchronous methods are also available.\niv = setInterval(function() {\n    led.writeSync(led.readSync() === 0 ? 1 : 0); // 1 = on, 0 = off :)\n}, 200);\n\n// Stop blinking the LED and turn it off after 5 seconds.\nsetTimeout(function() {\n    clearInterval(iv); // Stop blinking\n    led.writeSync(0);  // Turn LED off.\n    led.unexport();    // Unexport GPIO and free resources\n}, 5000);\n```\n\n## Asynchronous API - Blink the LED on GPIO #17 20 times\n\n```js\nvar Gpio = require('onoff').Gpio, // Constructor function for Gpio objects.\n    led = new Gpio(17, 'out');    // Export GPIO #17 as an output.\n\n// Toggle the state of the LED on GPIO #17 every 200ms 'count' times.\n// Here asynchronous methods are used. Synchronous methods are also available.\n(function blink(count) {\n    if (count <= 0) return led.unexport();\n\n    led.read(function(err, value) {  // Asynchronous read.\n        if (err) throw err;\n\n        led.write(value === 0 ? 1 : 0, function(err) { // Asynchronous write.\n            if (err) throw err;\n        });\n    });\n\n    setTimeout(function() {\n        blink(count - 1);\n    }, 200);\n})(20);\n```\n\n## Wait for the button on GPIO #18 to interrupt\n\nThis example watches a momentary push button on GPIO #18 and prints a message\nwhen when the button is pressed interrupting the CPU. The watch method doesn't\nrequire CPU resources while waiting for an interrupt to occur freeing the CPU\nto perfrom other tasks.\n\n```js\nvar Gpio = require('onoff').Gpio,        // Constructor function for Gpio objects.\n    button = new Gpio(18, 'in', 'both'); // Export GPIO #18 as an interrupt\n                                         // generating input.\n\nconsole.log('Please press the button on GPIO #18...');\n\n// The callback passed to watch will be called when the button on GPIO #18 is\n// pressed. \nbutton.watch(function (err, value) {\n    if (err) throw err;\n\n    console.log('Button pressed!, its value was ' + value);\n\n    button.unexport(); // Unexport GPIO and free resources\n});\n```\n\n## How to handle superuser issues\n\nIn gereral, superuser privileges are required for exporting and using GPIOs.\nHowever, running all processes that access GPIOs as the superuser will be\nunacceptable for most. To resolve this issue onoff can be used as follows:\n\nStep 1 - Export GPIOs as superuser\n\nCreate a simple program for exporting GPIOs and execute this program with\nsuperuser privileges. In addition to exporting the GPIOs, this program will\nautomatically change the access permissions for the GPIOs value file giving\nall users read and write access.\n\n```js\nvar Gpio = require('onoff').Gpio,\n    led = new Gpio(17, 'out');\n```\n\nStep 2 - The application can be run by a non-superuser\n\nAfter the program from step one has been executed by the superuser, the\napplication itself can be executed by a non-superuser. The Gpio constructor\nwill see that the GPIO has already been exported to userspace and will not\nattempt to export it again. The value of the GPIO can be modified as all\nusers have read and write access to its value file.\n\nHighspeed Blinking\n\n```js\nvar Gpio = require('onoff').Gpio,\n    led = new Gpio(17, 'out'),\n    time = process.hrtime(),\n    herz,\n    i;\n\nfor (i = 0; i !== 50000; i += 1) {\n    led.writeSync(1);\n    led.writeSync(0);\n}\n\ntime = process.hrtime(time);\nherz = Math.floor(i / (time[0] + time[1] / 1E9));\n\nconsole.log('Frequency = ' + herz / 1000 + 'KHz');\n```\n\nDepending on the system load, the frequency logged to the console should be up\nto 35KHz on a 720MHz BeagleBone or up to 23KHz on a 700MHz Raspberry Pi.\n\nStep 3 - Unexport GPIOs as superuser\n\nAfter the application has terminated, a third program can be executed by the\nsuperuser to unexport the appropriate GPIOs.\n\n```js\nvar Gpio = require('onoff').Gpio,\n    led = new Gpio(17, 'out');\n\nled.unexport();\n```\n\n## Additional Information\n\nonoff has been tested on the BeagleBone (Ångström) and Raspberry Pi (Raspbian).\nThe suitability of onoff for a particular Linux board is highly dependent on\nhow GPIO interfaces are made available on that board. The\n[GPIO interfaces](http://www.kernel.org/doc/Documentation/gpio.txt)\ndocumentation describes GPIO access conventions rather than standards that must\nbe followed so GPIO can vary from platform to platform. For example, onoff\nrelies on sysfs files located at /sys/classes/gpio being available. However,\nthese sysfs files for userspace GPIO are optional and may not be available on a\nparticular platform.\n\nAs its name hopefully indicates, onoff can be used for turning things on and\noff and detecting interrupts at a \"reasonable\" frequency. It's not intended for\nuse in [bit banging](http://en.wikipedia.org/wiki/Bit_banging) applications.\n\n",
  "readmeFilename": "README.md",
  "_id": "onoff@0.1.3",
  "dist": {
    "shasum": "b924a288188d28dc3d64d4c73092944cc458e398"
  },
  "_from": "onoff"
}
